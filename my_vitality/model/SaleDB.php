<?php

class SaleDB {

    /**
    * @method - addSale($sale)
    * @description - add Sale to DB
    * @param - $sale - sale Object
    * @return integer representing the auto generated ID or 0 for no rows affected or if query did not execute at all
    */
    public static function addSale($sale) {
        $db = Database::getDB();

        $amt = $sale->getPaymentAmount();
        $payDate = $sale->getPaymentDate();
        $status = $sale->getSaleStatus();
        $invID = $sale->getInvID();

        $query = 'INSERT INTO SALE (salePaymentAmt, salePaymentDate, saleStatus, invID)
        VALUES (:amt, :payDate, :status, :invID)';


        $statement = $db->prepare($query);

        $statement->bindValue(':amt', $amt);
        $statement->bindValue(':payDate', $payDate);
        $statement->bindValue(':status', $status);
        $statement->bindValue(':invID', $invID);

        $success = $statement->execute();

        if ($success) { // check query was successfully executed
            $count = $statement->rowCount();
            if ($count == 0) { // ensure that a row was inserted
                return 0;
            } else { // return autogenerated ID
                return $db->lastInsertID();
            }
        } else {
            return 0;
        }
    }

    /**
    * @method - getSaleByInv($id)
    * @description - get the sale associated with an invoice
    * @param - integer, the id of a invoice
    * @return - a sale object
    */
    public static function getSaleByInv($id) {
        $db = Database::getDB();

        $query = 'SELECT saleID, salePaymentAmt, salePaymentDate, saleStatus, invID
        FROM SALE
        WHERE invID = :id';

        $statement = $db->prepare($query);

        $statement->bindValue(':id', $id);

        $success = $statement->execute();

        if ($success) { // check query was successfully executed
            $sale = $statement->fetch();
            $statement->closeCursor();
            $saleObj = new Sale($sale['saleID'], $sale['salePaymentAmt'], $sale['salePaymentDate'], $sale['saleStatus'], $sale['invID']);
            return $saleObj;
        } else {
            $statement->closeCursor();
            $error_message = ERROR_MSG_DATABASE;
            $_SESSION['database_error_message']['error'] = $error_message;
            header('Location: error.php');
            exit();
        }
    }

    /**
    * @method - getSaleBySaleID($id)
    * @description - get the sale associated with a sale id
    * @param - integer, the id of a sale
    * @return - a sale object
    */
    public static function getSaleBySaleID($id) {
        $db = Database::getDB();

        $query = 'SELECT saleID, salePaymentAmt, salePaymentDate, saleStatus, invID
        FROM SALE
        WHERE saleID = :id';

        $statement = $db->prepare($query);

        $statement->bindValue(':id', $id);

        $success = $statement->execute();

        if ($success) { // check query was successfully executed
            $sale = $statement->fetch();
            $statement->closeCursor();
            $saleObj = new Sale($sale['saleID'], $sale['salePaymentAmt'], $sale['salePaymentDate'], $sale['saleStatus'], $sale['invID']);
            return $saleObj;
        } else {
            $statement->closeCursor();
            $error_message = ERROR_MSG_DATABASE;
            $_SESSION['database_error_message']['error'] = $error_message;
            header('Location: error.php');
            exit();
        }
    }

    /**
    * @method - addCustomerPayment($sale)
    * @description - add a payment from a customer
    * @param - a sale object
    * @return - Boolean value indicating whether the operation was a success
    */
    public static function addCustomerPayment($sale) {
        $db = Database::getDB();

        if (!property_exists($sale, 'paymentAmount') && !property_exists($sale, 'id') && !property_exists($sale, 'paymentDate')) {
            $error_message = ERROR_MSG_MISSING;
            $_SESSION['database_error_message']['error'] = $error_message;
            header('Location: error.php');
            exit();
        } else {
            $id = $sale->getID();
            $paid = $sale->getPaymentAmount();
            $recordDate = $sale->getPaymentDate();
        }

        $query = 'UPDATE SALE
        SET salePaymentAmt = :paid, salePaymentDate = :recordDate
        WHERE saleID = :id';

        $statement = $db->prepare($query);

        $statement->bindValue(':paid', $paid);
        $statement->bindValue(':id', $id);
        $statement->bindValue(':recordDate', $recordDate);

        $sucess = $statement->execute();

        $statement->closeCursor();

        if ($sucess) {
            return true;
        } else {
            return false;
        }
    }

    /**
    * @method - updateStatus($saleObj)
    * @description - to update the staus of a order
    * @param - $saleObj - sale object
    * @return - a BOOLEAN to represent whether a row was updated
    */
    public static function updateStatus($saleObj) {
        $db = Database::getDB();

        $saleID = $saleObj->getID();
        $status = $saleObj->getSaleStatus();

        $query = 'UPDATE SALE
        SET saleStatus = :status
        WHERE saleID = :saleID';

        $statement = $db->prepare($query);

        $statement->bindValue(':status', $status);
        $statement->bindValue(':saleID', $saleID);

        $success = $statement->execute();

        if ($success) { // check query was successfully executed
            return true;
        } else {
            return false;
        }
    } 

    /**
    * @method - updateSaleDate($saleObj)
    * @description - to update the date of a sale
    * @param - $saleObj - sale object
    * @return - a BOOLEAN to represent whether a row was updated
    */
    public static function updateSaleDate($saleObj) {
        $db = Database::getDB();

        $saleID = $saleObj->getID();
        $saleDate = $saleObj->getPaymentDate();

        $query = 'UPDATE SALE
        SET salePaymentDate = :saleDate
        WHERE saleID = :saleID';

        $statement = $db->prepare($query);

        $statement->bindValue(':saleDate', $saleDate);
        $statement->bindValue(':saleID', $saleID);

        $success = $statement->execute();

        if ($success) { // check query was successfully executed
            return true;
        } else {
            return false;
        }
    }

} // end of class

?>
